import 'package:flutter/material.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import 'package:encrypt/encrypt.dart' as encrypt;
import 'dart:convert';

class CredentialManager {
  static Database? _database;

  // Kh√≥a m√£ h√≥a (N√™n l∆∞u tr·ªØ an to√†n h∆°n trong ·ª©ng d·ª•ng th·ª±c t·∫ø)
  static final _encryptionKey = encrypt.Key.fromUtf8(
    'thanhdaodeptraiquatroiquadat1234',
  );
  static final _iv = encrypt.IV.fromUtf8('thanhdaodeptrai');

  // Kh·ªüi t·∫°o database
  static Future<Database> get database async {
    if (_database != null) return _database!;

    _database = await _initDatabase();
    return _database!;
  }

  static Future<Database> _initDatabase() async {
    String path = join(await getDatabasesPath(), 'credentials.db');

    return await openDatabase(
      path,
      version: 1,
      onCreate: (Database db, int version) async {
        await db.execute(
          'CREATE TABLE credentials('
          'id INTEGER PRIMARY KEY AUTOINCREMENT, '
          'domain TEXT, '
          'username TEXT, '
          'password TEXT, '
          'last_used TIMESTAMP)',
        );
      },
    );
  }

  // M√£ h√≥a m·∫≠t kh·∫©u
  static String _encryptPassword(String password) {
    final encrypter = encrypt.Encrypter(encrypt.AES(_encryptionKey));
    final encrypted = encrypter.encrypt(password, iv: _iv);
    return encrypted.base64;
  }

  // Gi·∫£i m√£ m·∫≠t kh·∫©u
  static String _decryptPassword(String encryptedPassword) {
    try {
      final encrypter = encrypt.Encrypter(encrypt.AES(_encryptionKey));
      final decrypted = encrypter.decrypt64(encryptedPassword, iv: _iv);
      return decrypted;
    } catch (e) {
      print("‚ùå L·ªói khi gi·∫£i m√£ m·∫≠t kh·∫©u: $e");
      return encryptedPassword; // Tr·∫£ v·ªÅ m·∫≠t kh·∫©u ƒë√£ m√£ h√≥a n·∫øu l·ªói
    }
  }

  // ‚úÖ L∆∞u m·∫≠t kh·∫©u (ki·ªÉm tra c·∫£ domain v√† username)
  static Future<void> saveCredentials(
    String domain,
    String username,
    String password,
  ) async {
    final db = await database;

    final List<Map<String, dynamic>> existingCredentials = await db.query(
      'credentials',
      where: 'domain = ? AND username = ?',
      whereArgs: [domain, username],
    );

    if (existingCredentials.isNotEmpty) {
      // N·∫øu t·ªìn t·∫°i, c·∫≠p nh·∫≠t m·∫≠t kh·∫©u v√† timestamp
      await db.update(
        'credentials',
        {
          'password': _encryptPassword(password),
          'last_used': DateTime.now().toIso8601String(),
        },
        where: 'domain = ? AND username = ?',
        whereArgs: [domain, username],
      );
      print("üîÑ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u cho $domain ($username)");
    } else {
      // N·∫øu ch∆∞a c√≥, th√™m m·ªõi
      await db.insert('credentials', {
        'domain': domain,
        'username': username,
        'password': _encryptPassword(password),
        'last_used': DateTime.now().toIso8601String(),
      });
      print("‚úÖ Th√™m t√†i kho·∫£n m·ªõi: $domain ($username)");
    }
  }

  // ‚úÖ L·∫•y m·∫≠t kh·∫©u ƒë√£ l∆∞u (debug ƒë·ªÉ ki·ªÉm tra l·ªói)
  static Future<Map<String, String>?> getCredentials(String domain) async {
    final db = await database;

    final List<Map<String, dynamic>> credentials = await db.query(
      'credentials',
      where: 'domain = ?',
      whereArgs: [domain],
    );

    if (credentials.isEmpty) {
      print("üî¥ Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho domain: $domain");
      return null;
    }

    print("‚úÖ T√¨m th·∫•y credentials: ${credentials.first}");

    // C·∫≠p nh·∫≠t th·ªùi gian s·ª≠ d·ª•ng
    await db.update(
      'credentials',
      {'last_used': DateTime.now().toIso8601String()},
      where: 'id = ?',
      whereArgs: [credentials.first['id']],
    );

    return {
      'username': credentials.first['username'],
      'password': _decryptPassword(credentials.first['password']),
    };
  }

  // ‚úÖ X√≥a th√¥ng tin ƒëƒÉng nh·∫≠p theo domain
  static Future<void> deleteCredentials(String domain) async {
    final db = await database;
    await db.delete('credentials', where: 'domain = ?', whereArgs: [domain]);
    print("üóë X√≥a t√†i kho·∫£n cho domain: $domain");
  }

  // ‚úÖ L·∫•y t·∫•t c·∫£ t√†i kho·∫£n ƒë√£ l∆∞u
  static Future<List<Map<String, dynamic>>> getAllCredentials() async {
    final db = await database;
    final data = await db.query(
      'credentials',
      columns: ['domain', 'username', 'last_used'],
      orderBy: 'last_used DESC',
    );
    print("üìå Danh s√°ch t·∫•t c·∫£ t√†i kho·∫£n ƒë√£ l∆∞u: $data");
    return data;
  }

  // ‚úÖ Tr√≠ch xu·∫•t domain t·ª´ URL
  static String extractDomain(String url) {
    Uri uri = Uri.parse(url);
    return uri.host;
  }
}
